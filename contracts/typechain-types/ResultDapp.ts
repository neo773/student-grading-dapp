/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ResultDapp {
  export type BatchStruct = {
    batchId: PromiseOrValue<BigNumberish>;
    studentRecordsRoot: PromiseOrValue<BytesLike>;
    IPFSHash: PromiseOrValue<string>;
  };

  export type BatchStructOutput = [BigNumber, string, string] & {
    batchId: BigNumber;
    studentRecordsRoot: string;
    IPFSHash: string;
  };
}

export interface ResultDappInterface extends utils.Interface {
  functions: {
    "addBatch(uint256,bytes32,string)": FunctionFragment;
    "addUser(address)": FunctionFragment;
    "deleteUser(address)": FunctionFragment;
    "editBatch(uint256,bytes32,string)": FunctionFragment;
    "getAllBatches()": FunctionFragment;
    "getAllWhitelistedAddresses()": FunctionFragment;
    "getBatch(uint256)": FunctionFragment;
    "verifyStudentRecord(uint256,bytes32,bytes32[])": FunctionFragment;
    "verifyUser(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addBatch"
      | "addUser"
      | "deleteUser"
      | "editBatch"
      | "getAllBatches"
      | "getAllWhitelistedAddresses"
      | "getBatch"
      | "verifyStudentRecord"
      | "verifyUser"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addBatch",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "editBatch",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllBatches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllWhitelistedAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBatch",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyStudentRecord",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyUser",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "addBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "editBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllWhitelistedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyStudentRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyUser", data: BytesLike): Result;

  events: {};
}

export interface ResultDapp extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ResultDappInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addBatch(
      _batchId: PromiseOrValue<BigNumberish>,
      _studentRecordsRoot: PromiseOrValue<BytesLike>,
      IPFSHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addUser(
      _addressToWhitelist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteUser(
      _addressToUnwhitelist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editBatch(
      _batchId: PromiseOrValue<BigNumberish>,
      _newBatchRoot: PromiseOrValue<BytesLike>,
      IPFSHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllBatches(
      overrides?: CallOverrides
    ): Promise<[ResultDapp.BatchStructOutput[]]>;

    getAllWhitelistedAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    getBatch(
      _batchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ResultDapp.BatchStructOutput]>;

    verifyStudentRecord(
      _batchId: PromiseOrValue<BigNumberish>,
      _leaf: PromiseOrValue<BytesLike>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyUser(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addBatch(
    _batchId: PromiseOrValue<BigNumberish>,
    _studentRecordsRoot: PromiseOrValue<BytesLike>,
    IPFSHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addUser(
    _addressToWhitelist: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteUser(
    _addressToUnwhitelist: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editBatch(
    _batchId: PromiseOrValue<BigNumberish>,
    _newBatchRoot: PromiseOrValue<BytesLike>,
    IPFSHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllBatches(
    overrides?: CallOverrides
  ): Promise<ResultDapp.BatchStructOutput[]>;

  getAllWhitelistedAddresses(overrides?: CallOverrides): Promise<string[]>;

  getBatch(
    _batchId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ResultDapp.BatchStructOutput>;

  verifyStudentRecord(
    _batchId: PromiseOrValue<BigNumberish>,
    _leaf: PromiseOrValue<BytesLike>,
    _proof: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyUser(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addBatch(
      _batchId: PromiseOrValue<BigNumberish>,
      _studentRecordsRoot: PromiseOrValue<BytesLike>,
      IPFSHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addUser(
      _addressToWhitelist: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteUser(
      _addressToUnwhitelist: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    editBatch(
      _batchId: PromiseOrValue<BigNumberish>,
      _newBatchRoot: PromiseOrValue<BytesLike>,
      IPFSHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllBatches(
      overrides?: CallOverrides
    ): Promise<ResultDapp.BatchStructOutput[]>;

    getAllWhitelistedAddresses(overrides?: CallOverrides): Promise<string[]>;

    getBatch(
      _batchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ResultDapp.BatchStructOutput>;

    verifyStudentRecord(
      _batchId: PromiseOrValue<BigNumberish>,
      _leaf: PromiseOrValue<BytesLike>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyUser(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    addBatch(
      _batchId: PromiseOrValue<BigNumberish>,
      _studentRecordsRoot: PromiseOrValue<BytesLike>,
      IPFSHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addUser(
      _addressToWhitelist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteUser(
      _addressToUnwhitelist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editBatch(
      _batchId: PromiseOrValue<BigNumberish>,
      _newBatchRoot: PromiseOrValue<BytesLike>,
      IPFSHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllBatches(overrides?: CallOverrides): Promise<BigNumber>;

    getAllWhitelistedAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    getBatch(
      _batchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyStudentRecord(
      _batchId: PromiseOrValue<BigNumberish>,
      _leaf: PromiseOrValue<BytesLike>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyUser(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBatch(
      _batchId: PromiseOrValue<BigNumberish>,
      _studentRecordsRoot: PromiseOrValue<BytesLike>,
      IPFSHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addUser(
      _addressToWhitelist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteUser(
      _addressToUnwhitelist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editBatch(
      _batchId: PromiseOrValue<BigNumberish>,
      _newBatchRoot: PromiseOrValue<BytesLike>,
      IPFSHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllBatches(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllWhitelistedAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBatch(
      _batchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyStudentRecord(
      _batchId: PromiseOrValue<BigNumberish>,
      _leaf: PromiseOrValue<BytesLike>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyUser(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
